//
// Contains tests related to the expression functionality.
//

CONTRACT_GROUP
{
    name = Expression
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionBehaviour
    group = Expression

    // Contract text
    title = EXP - Behaviour
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    // Test out the Random(int) function
    maxCompletions = AllBodies().Random(3).Count()

    targetBody = [Kerbin].Concat([Mun]).Add(Minmus).Random()

    // Contract rewards
    rewardScience = 100.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }

    BEHAVIOUR
    {
        name = Expression1
        type = Expression

        CONTRACT_ACCEPTED
        {
            CC_TestVal = 10 * 2 - 3 * 4
        }

        CONTRACT_COMPLETED_SUCCESS
        {
            CC_TestVal = CC_TestVal * 2
            CC_EXPTEST_Success = 1
        }

        CONTRACT_COMPLETED_FAILURE
        {
            CC_TestVal = CC_TestVal / 2
            CC_EXPTEST_Success = 0
        }

        PARAMETER_COMPLETED
        {
            parameter = ReachState

            CC_ParamThing = 10
        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionRequirement
    group = Expression

    // Contract text
    title = EXP - Requirement
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }

    REQUIREMENT
    {
        name = Expression1
        type = Expression

        expression = CC_EXPTEST_Success == 1 || CC_TestVal != 0
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = 10 == 50 || 100 > 2
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = 10 == 50 && 100 > 2 || 10 < 20
    }
}


CONTRACT_TYPE
{
    name = ExpressionInLine
    group = Expression

    // Contract text
    title = EXP - In Line
    description = The title of this contract is @title, and the target is @targetBody.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = [HomeWorld(), Mun, Minmus].Random()

    // Contract rewards
    rewardFunds = Random(100.0, 1000.0)
    rewardScience = @targetBody == Kerbin ? 10.0 : 5.0
    rewardReputation = @targetBody.IsHomeWorld() ? 10.0 : 5.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = @minAltitude * 10
    }

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @maxAltitude / 10
        maxAltitude = 5000
    }

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @/targetBody.Radius()
        maxAltitude = @/targetBody.Radius() + @/targetBody.Parent().Radius()
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }
}


CONTRACT_TYPE
{
    name = ExpressionList
    group = Expression

    // Contract text
    title = EXP - List
    description = The title of this contract is @title, and the target is @targetBody.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = [HomeWorld(), Mun, Minmus].Where(x => x.IsMoon()).Random()

    // Contract rewards
    rewardFunds = 10.0
    rewardScience = 10.0
    rewardReputation = 10.0

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }
}


CONTRACT_TYPE
{
    name = ExpressionErrorHandling
    group = Expression

    // Contract text
    title = EXP - Error Handling
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000.0

    // Circular reference
    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @maxAltitude / 10
        maxAltitude = @minAltitude * 10
    }
}


CONTRACT_TYPE
{
    name = ExpressionTypes
    group = Expression

    // Contract text
    title = EXP - Types
    description = Part is @targetPart (@targetPart.Description()).
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000.0

    DATA
    {
        type = Boolean
        someBoolean = @/targetBody != null
    }

    DATA
    {
        type = AvailablePart
        targetPart = Mark1-2Pod
    }

    // Circular reference
    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 100
    }
}



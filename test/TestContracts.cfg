// ContractConfiguration sample file

CONTRACT_GROUP
{
    name = TestGroup

    maxCompletions = 5
    maxSimultaneous = 3
}

// Each CONTRACT_TYPE node represents a type of contract that can be offered
CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = SimpleTestContract

    // Group the contract belongs to, optional
    group = TestGroup

    // Contract title is displayed in the window in the corner, shoudl be short
    // and descritive
    title = Simple Test Contract

    // Two options for specifying the description:
    // 1) Supply the full text here in the description field
    //description = A more detailed description of the contract.

    // 2) Supply the following fields, which will be fed into the text
    //    generator.  Use of the CoherentContracts mod is highly recommended,
    //    as it generates far more meaningful text.
    topic = ContractConfigurator  // Topic of the contract.  Should be a
                                  // singular noun.
    subject = Kerbal              // Subject of the contract.  See
                                  // CoherentContracts for some possible values.
                                  // Includes stuff like Kerbal, Experiment,
                                  // Parts, Mun, MunSrf, etc.
    motivation = test             // Motivation for why we are doing the
                                  // contract.  See CoherentContracts for some
                                  // possible values.  Some values used are:
                                  // flags, test, rescue.

    // Contract notes are displayed in mission control.  Use it to give 
    // any special instructions.
    //
    // Optional
    notes = These are the contract level notes.

    // The contract synopsis appears in bold.  Give a quick summary of the
    // contract objective.
    synopsis = We want you to do a thing.

    // The completedMessage is the message that is displayed when the contract
    // completes.
    completedMessage = You have done the thing.

    // Agent (agency).  If not populated, a random agent will be selected.
    agent = Integrated Integrals

    // Contract min/max expiry in days.  Default is a contract that does not expire.
    minExpiry = 500.0
    maxExpiry = 1000.0

    // Contract deadline in days.  Default is no deadline.
    deadline = 500

    // Controls for whether a contract can be declined or cancelled, default is true for both
    cancellable = true
    declinable = true

    // Prestige.  If not specified, this contract type will be available at any prestige level.
    // Otherwise, locked to the level specified.  Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Significant

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric values (increasing science, etc.).  Also gets used in some of the
    // parameter classes.
    //
    // Default = null (no celestial body)
    targetBody = Kerbin

    // The maximum number of times this contract type can be completed (0 being unlimited).
    // Default = 0
    maxCompletions = 3

    // The maximum instances of this contract that can be active at one time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards
    rewardScience = 100.0
    rewardReputation = 20.0
    rewardFunds = 100000.0
    failureReputation = 10.0
    failureFunds = 10000.0
    advanceFunds = 10000.0

    // The weight is used in the contract generation process.  Each contract
    // type that is available to be offered is added to a weighted list.
    // Contract types with a higher value are more likely to be chosen.
    //
    // Default = 1.0
    weight = 10.0

    // The PARAMETER node defines a contract parameter.  The following parameter displays all the
    // fields that are supported for a parameter across all types.  See the ParameterTestContract
    // for examples of all supported parameters.
    PARAMETER
    {
        // The parameter name is not used, but should be provided to allow for the possibility of
        // other mods modifying contracts via ModuleManager.
        name = Param1

        // The type defines the type of Parameter.  See below for all supported
        // ContractConfigurator parameters
        type = AltitudeRecord

        // This is a parameter specific to the AltituteRecord parameter type.  Each parameter type
        // can have include its own custom fields.
        altitude = 45000

        // Target celestial body.  Defaults to the targetBody of the contract.  For most
        // parameters this only has an impacton the reward/failure amounts
        targetBody = Kerbin

        // Parameter rewards
        rewardScience = 100.0
        rewardReputation = 20.0
        rewardFunds = 100000.0
        failureReputation = 10.0
        failureFunds = 10000.0

        // When the parameter's state changes to completed or failed, disable the parameter.  Use
        // a value of false if you are trying to make something behave like the Squad part test
        // contract.  Example, if the parameter says you need to be between 1000 and 2000 meters
        // altitude then setting this to false will make the parameter go back to incomplete if you
        // enter and leave the altitude window.
        //
        // Default = true
        disableOnStateChange = true

        // Optional parameters do not need to be completed (mainly for use with composite
        // parameters)
        optional = true
    }

    REQUIREMENT
    {
        // The requirement name is not used, but should be provided to allow for the possibility of
        // other mods modifying contracts via ModuleManager.
        name = Requirement1

        // The type defines the type of Requirement.  See below for all supported
        // ContractConfigurator requirements.
        type = ReachSpace

        // The invertRequirement is a logical NOT.  In this example, the requirement becomes that
        // the player must not yet have reached space.
        //
        // Default = false
        invertRequirement = true
    }
}


// This contract shows all the different parameters that can be used.
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ParameterTestContract

    // Contract text
    title = Parameter Test Contract
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0
    rewardFunds = 100000.0

    maxSimultaneous = 1

    //
    // PARAMETERS
    //
    // The following sections lists all the valid ContractConfigurator parameters.  Others can
    // be added outside of ContractConfigurator by subclassing ParameterFactory.

    // The AltituteRecord parameter is met when a craft reaches the given altitude on Kerbin.
    PARAMETER
    {
        name = AltitudeRecord1
        type = AltitudeRecord
        altitude = 6000

        REQUIREMENT
        {
            // The requirement name is not used, but should be provided to allow for the possibility of
            // other mods modifying contracts via ModuleManager.
            name = Requirement1

            // The type defines the type of Requirement.  See below for all supported
            // ContractConfigurator requirements.
            type = ReachSpace

            // The invertRequirement is a logical NOT.  In this example, the requirement becomes that
            // the player must not yet have reached space.
            //
            // Default = false
            invertRequirement = true
        }
    }

    // The CollectScience parameter is met when science is sent home from the given location
    // and celestial body
    PARAMETER
    {
        name = CollectScience1
        type = CollectScience

        // This can be inherited from the the contract type if necessary
//        targetBody = Duna

        // Valid values are "Surface" and "Space"
        location = Space

        REQUIREMENT
        {
            // The requirement name is not used, but should be provided to allow for the possibility of
            // other mods modifying contracts via ModuleManager.
            name = Requirement1

            // The type defines the type of Requirement.  See below for all supported
            // ContractConfigurator requirements.
            type = ReachSpace
        }
    }

    PARAMETER
    {
        name = AtMost
        type = AtMost

        count = 1
        completeInSequence = true

        PARAMETER
        {
            name = ReachState
            type = ReachState

            minAltitude = 5000
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience
        }
    }


    // The KerbalDeaths parameter *fails* if more Kerbals than the countMax die
    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths

        // Maximum Number of Kerbals that can die before this contract is considered failed
        // Default = 0
        countMax = 1
    }

    // Among the easier parameters - launch a vessel!
    PARAMETER
    {
        name = LaunchVessel1
        type = LaunchVessel
    }

    // The PlantFlag parameter is met when planting a flag on the given body
    PARAMETER
    {
        name = PlantFlag1
        type = PlantFlag

        // This can be inherited from the the contract type if necessary
        targetBody = Kerbin
    }

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 20000
        maxAltitude = 50000

        minSpeed = 1000
        maxSpeed = 5000

        biome = Shores

        targetBody = Kerbin

        situation = FLYING
    }

    // Return home
    PARAMETER
    {
        name = ReturnHome1
        type = ReturnHome

        disableOnStateChange = false
    }

    // Go to space.  That's it.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // The BoardAnyVessel parameter is met when the named Kerbal boards a vessel (this one is
    // from the Squad "rescue" contracts and is a little bit less useful on its own.
    PARAMETER
    {
        name = BoardAnyVessel1
        type = BoardAnyVessel

        // The Kerbal that needs to board a vessel
        kerbal = Jebediah Kerman

        // Text to use for the parameter
        // Default = <kerbal>: Board a vessel
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        kerbal = Jebediah Kerman

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // PartTest is for testing parts (or just activating them, for staged parts).  This parameter
    // supports child parameters - you will only be able to complete the part test if all child
    // parameters are also completed.
    PARAMETER
    {
        name = PartTest1
        type = PartTest

        // The Kerbal to be recovered
        part = SmallGearBay

        // Additional notes to display (in the Squad PartTest contract, this is where they say
        // "Activate through the staging system", etc.
        // Optional
//        notes = Test this part anywhere, no other requirements!
    }

    // The Any parameter doesn't provide anything on its own.  It will be completed if any one
    // of its child parameters are completed.
    PARAMETER
    {
        name = Any1
        type = Any

        // The text to display.  Highly recommended that you do not use the default - when the
        // parameter is complete the text of the children disappears (and the default text doesn't
        // give the player a very good idea what the parameter was about).
        //
        // Default - Complete any ONE of the following
        title = Do this or that

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachSpace1
            type = ReachSpace
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            minSpeed = 1000
            maxSpeed = 5000
        }
    }

    PARAMETER
    {
        name = AtLeast
        type = AtLeast

        count = 2

        PARAMETER
        {
            name = ReachSpace1
            type = ReachSpace
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            minSpeed = 4000
            maxSpeed = 5000
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience
        }
    }

    // The All parameter doesn't provide anything on its own.  It is completed once all its child
    // parameters are completed.  Use it with disableOnStateChange = false to build conditions
    // similar to those in the Squad part test contracts.
    PARAMETER
    {
        name = All1
        type = All

        // The text to display.  Highly recommended that you do not use the default - when the
        // parameter is complete the text of the children disappears (and the default text doesn't
        // give the player a very good idea what the parameter was about).
        //
        // Default - Complete ALL of the following
        title = Do these things

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachState
            type = ReachState

            minAltitude = 20000
            maxAltitude = 50000

            minSpeed = 1000
            maxSpeed = 5000
        }
    }

    // The Duration parameter is similar to the All parameter, with the extra requirement that the
    // player must keep the child parameters satisfied for the specified duration.  Use it with
    // disableOnStateChange = false for the child parameters
    PARAMETER
    {
        name = VesselParameterGroup1
        type = VesselParameterGroup

        // The text to display.
        // Default - Do the following for <duration>
        //title = 

        // The duration that the conditions must be satisfied for.  Can specify values in
        // years (y), days (d), hours (h), minutes (m), seconds (s) or any combination of those.
        duration = 10d 2h

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachState
            type = ReachState

            situation = ORBITING
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            targetBody = Kerbin
        }
    }

    PARAMETER
    {
        name = VesselDestroyed
        type = VesselDestroyed

        mustImpactTerrain = true
    }

    PARAMETER
    {
        name = HasCrew
        type = HasCrew

        minCrew = 0
        maxCrew = 0
    }

    PARAMETER
    {
        name = ReachStateHidden
        type = ReachState

        hideChildren = true
        title = Reach the hidden state

        situation = ORBITING
    }

    // The Timer parameter is a simple timer.  When the timer hits zero, the contract fails.
    PARAMETER
    {
        name = Timer1
        type = Timer

        duration = 10d 30m
    }
}

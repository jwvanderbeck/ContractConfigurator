CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = KerbalSpawnerOrbit

    // Contract text
    title = Kerbal Spawner - Orbit
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    maxSimultaneous = 1

    // The BoardAnyVessel parameter is met when the named Kerbal boards a vessel (this one is
    // from the Squad "rescue" contracts and is a little bit less useful on its own.
    PARAMETER
    {
        name = BoardAnyVessel1
        type = BoardAnyVessel

        // The Kerbal that needs to board a vessel
        index = 0

        // Text to use for the parameter
        // Default = <kerbal>: Board a vessel
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 0

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    BEHAVIOUR
    {
        name = SpawnKerbal1
        type = SpawnKerbal

        KERBAL
        {
            // If the name is not supplied, one will be autogenerated by KSP
            name = Kerbediah Kerman

            // Whether the Kerbal should show up as owned or unowned (if it is)
            // owned, then it will be immediately selectable.
            owned = true

            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
            ORBIT
            {
                SMA = 1449999.99996286
                ECC = 1.07570816555399E-05
                INC = 0
                LPE = 270.690311604893
                LAN = 1.93635924563296
                MNA = 1.55872660382504
                EPH = 31.3999999999994
                REF = 1
            }
        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = KerbalSpawnerLanded

    // Contract text
    title = Kerbal Spawner - Landed
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    maxSimultaneous = 1

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 0

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 1

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 2

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 3

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 4

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 5

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        index = 6

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    BEHAVIOUR
    {
        name = SpawnKerbal1
        type = SpawnKerbal

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

            lat = 10.595910968977
            lon = 239.804476675472
            alt = 387.929475510377

            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
            ORBIT
            {
                SMA = 300947.839511441
                ECC = 0.994989997057124
                INC = 10.5959108709923
                LPE = 269.9963048776
                LAN = 242.28091121094
                MNA = 3.14159265358979
                EPH = 148.340000000002
                REF = 1
            }
        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

            lat = 10.5959846575775
            lon = 239.804382631481
            alt = 387.883449808229
            ORBIT
            {
                SMA = 300947.816016612
                ECC = 0.994989999879796
                INC = 10.5959845625833
                LPE = 269.99613535267
                LAN = 241.526384359847
                MNA = 3.14159265358979
                EPH = 103.063858489988
                REF = 1
            }

        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

            lat = 10.5960022404127
            lon = 239.804479493849
            alt = 387.890940671088
            ORBIT
            {
                SMA = 300947.819619702
                ECC = 0.994990000885628
                INC = 10.5960021461703
                LPE = 269.99608076247
                LAN = 241.596537042109
                MNA = 3.14159265358979
                EPH = 107.263858489987
                REF = 1
            }
        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin
            lat = 10.5959402281943
            lon = 239.804570536435
            alt = 387.943313991884
            ORBIT
            {
                SMA = 300947.84610367
                ECC = 0.994989999350738
                INC = 10.5959401334953
                LPE = 269.996113869412
                LAN = 241.685928100464
                MNA = 3.14159265358979
                EPH = 112.623858489986
                REF = 1
            }

        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin
            lat = 10.5958633270055
            lon = 239.804565775915
            alt = 387.986816936871
            ORBIT
            {
                SMA = 300947.868428454
                ECC = 0.994989995912303
                INC = 10.5958632325022
                LPE = 269.996099712007
                LAN = 241.757271364745
                MNA = 3.14159265358979
                EPH = 116.903858489985
                REF = 1
            }

        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin
            lat = 10.5957182425934
            lon = 239.804556094359
            alt = 388.068778264336
            ORBIT
            {
                SMA = 300947.910632508
                ECC = 0.994989988484795
                INC = 10.5957181475953
                LPE = 269.996135809944
                LAN = 241.822225225753
                MNA = 3.14159265358979
                EPH = 120.803858489985
                REF = 1
            }

        }

        KERBAL
        {
            // Where the kerbal should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin
			lat = -0.096992729723051
			lon = 285.425467968966
			alt = 67.6843734193826
            ORBIT
            {
				SMA = NaN
				ECC = 1
				INC = NaN
				LPE = 34.5741627007994
				LAN = 232.543290576857
				MNA = -8.40714670366795
				EPH = 152.626119995123
				REF = 1
            }

        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = VesselSpawner

    // Contract text
    title = Vessel Spawner
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    maxSimultaneous = 1

    // The BoardAnyVessel parameter is met when the named Kerbal boards a vessel (this one is
    // from the Squad "rescue" contracts and is a little bit less useful on its own.
    PARAMETER
    {
        name = ReachState
        type = ReachState

        targetBody = Duna

        // Text to use for the parameter
        // Default = <kerbal>: Board a vessel
        //title = 
    }

    PARAMETER
    {
        name = VesselNotDestroyed
        type = VesselNotDestroyed

        vessel = The new vessel
    }

    PARAMETER
    {
        name = TargetDestroyed
        type = TargetDestroyed

        vessel = Landed Vessel
    }

    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = The new vessel

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractConfigurator/Little Rocket.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = True

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

            // Orbit that the vessel should be placed in.
            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
            ORBIT
            {
                SMA = 1449999.99996286
                ECC = 1.07570816555399E-05
                INC = 0
                LPE = 270.690311604893
                LAN = 1.93635924563296
                MNA = 1.55872660382504
                EPH = 31.3999999999994
                REF = 1
            }

            CREW
            {
                count = 1
            }
        }

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Landed Vessel

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractConfigurator/Little Rocket.craft

            // Location of the flag to use.
            // Default = Player's flag for the current game
            flagURL = Squad/Flags/satellite

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = True

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            targetBody = Kerbin

			lat = 0.096992729723051
			lon = 285.425467968966

            // A CREW node indicates one or more crew members to add to the
            // vessel
            CREW
            {
                // Name for the crew member - if not provided, one is
                // auto-generated.
                name = Patrick R. Kerman

                // Whether or not the Kerbal should be added to the roster on 
                // recovery.
                // Default = True
                addToRoster = True
            }
        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = DoNotDestroy

    // Contract text
    title = Do not destroy vessels
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    maxSimultaneous = 1

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup
 
        PARAMETER
        {
            name = ReachState
            type = ReachState

            targetBody = Duna
        }

        PARAMETER
        {
            name = VesselNotDestroyed
            type = VesselNotDestroyed
        }
    }
}
